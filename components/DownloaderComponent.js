import React from 'react';
import downloaderService from '../services/downloaderService';
import {Button, StyleSheet, TextInput, View, TouchableOpacity, Text, Image, Alert, Dimensions} from 'react-native';
import {VALIDATE_ENDPOINT, API_URL, DOWNLOAD_ENDPOINT} from '../common/constants';
import {queryString} from '../common/utils';
import ProgressBarCircle from './ProgressCircleComponent';
import TrackPlayer from 'react-native-track-player';

const dimensions = Dimensions.get('window');
const imageWidth = dimensions.width;

//
// const t = {
//
//         track: {
//             title: "Across 110th Street",
//             author: "Bobby Womack - Topic",
//             description: "Provided to YouTube by Modulor↵↵Across 110th Street · Bobby Womack↵↵I Got Soul - Blaxploitation Mood↵↵℗ Playoff Records / Modulor↵↵Released on: 2015-10-23↵↵Auto-generated by YouTube.",
//             length: 227,
//             rating: 4.8453531,
//             thumbnail: "https://i.ytimg.com/vi/YREPgce2gMk/maxresdefault.jpg",
//             views: 638575
//         }
// }

class Track {

    title = null
    description = null
    author = null
    views = null
    length = null
    rating = null
    thumbnailUrl = null

    constructor(trackObj) {
        // console.log('FROM TRACK CLASS')
        // trackObj = trackObj.toJSON()
        // console.log(trackObj)
        // console.log(trackObj.title)

        this.title = trackObj.track.title
        this.description = trackObj.track.description
        this.author = trackObj.track.author
        this.views = trackObj.track.views
        this.length = trackObj.track.length
        this.rating = trackObj.track.rating
        this.thumbnailUrl = trackObj.track.thumbnail
    }


}


export default class DownloaderComponent extends React.Component {


    state = {
        url: '',
        track: null,
        isFetching: false
    }

    constructor(props) {
        super(props);
        this.onNetworkFail = this.onNetworkFail.bind(this);

    }

    enqueueTrack(localUrl) {
        console.log("the path given to enqueue " + localUrl);
        let track = {
            id: this.state.track.title, // Must be a string, required

            url: `file://${localUrl}`, // Load media from the file system

            title: this.state.track.title,
            artist: this.state.track.author,

            artwork: this.state.track.thumbnailUrl, // Load artwork from the network
        };

        TrackPlayer.add([track]).then( () => console.log("track enqueued"));

    }

    onValidateSuccess() {
        {
            Alert.alert(
                "Success",
                "Found Video File!",
                [
                    {
                        text: "Ok",
                        onPress: () => {},
                        style: "default"
                    },
                ],
                { cancelable: true }
            );

        }
    }

    onNetworkFail() {


        {
            Alert.alert(
                "Error",
                "Unable to fetch Video File. Please check network connectivity and try again.",
                [
                    {
                        text: "Ok",
                        onPress: () => {},
                        style: "default"
                    },
                ],
                { cancelable: true }
            );

        }

        this.setState(
            {
                isFetching: false
            }
        )

    }



    async validate() {

        this.setState(
            {
                isFetching: true
            }
        )

        const track = await downloaderService.getInfo(
            `${API_URL}${VALIDATE_ENDPOINT}${queryString('url', this.state.url)}`,
            this.onNetworkFail)

        // this.state.track = new Track(track)

        if (Boolean(track)) {

            this.setState(
                {
                    track: new Track(track),
                    isFetching: false
                }
            )

            this.onValidateSuccess();

        }

    }



    async download() {

        await downloaderService.download(
            `${API_URL}${DOWNLOAD_ENDPOINT}${queryString('url', this.state.url)}`,
            this.state.track.title,
            this.onNetworkFail
        ).then(  downloadPath => {
                this.enqueueTrack(downloadPath)

            }
        );


    }


    componentDidMount() {
        // this.setState(
        //     {track: new Track(t)}
        // )

        // console.log(this.state.url);
        // this.downloadTest()

        // SEND ALERT ONCE fetched


    }

    componentDidUpdate(prevProps, prevState, snapshot) {
    }

    render() {
        return (
            <>
                <View style = {styles.inputContainer}>


                    <TextInput
                        style = {styles.urlInput}
                        onChangeText={text =>
                            this.setState({
                                url: text
                            })
                        }
                        value = {this.state.url}
                        placeholder = "URL"

                    />

                    <TouchableOpacity onPress={

                            async () =>
                                {
                                    await this.validate()

                            }
                    }
                            style = {styles.buttonStyle}
                            color="#87158
                            9">

                            <Text style = {styles.buttonText}>fetch vid</Text>

                    </TouchableOpacity>


                </View>

                <View style = {styles.trackInfoContainer}>


                    {
                        this.state.isFetching &&
                        <ProgressBarCircle/>
                    }

                    {
                        this.state.track &&

                        <View style={{justifyContent: 'center'}}>

                            <Text style = {styles.trackInfoText}>
                                {this.state.track.author + "\n"}
                                {this.state.track.title + "\n"}
                                {this.state.track.views.toString() + " views\n"}

                                {Math.floor(this.state.track.length / 60)}:{this.state.track.length % 60}

                            </Text>


                            <View style={{
                                borderTopLeftRadius: 50,
                                borderTopRightRadius: 50,
                                borderBottomLeftRadius: 50,
                                borderBottomRightRadius: 50,
                                overflow: 'hidden',
                                alignSelf: 'center'}}>
                                <Image
                                    source={{uri: this.state.track.thumbnailUrl}}
                                    style={{width: imageWidth, height: 255, alignSelf: 'center'}}

                                />
                            </View>

                            <TouchableOpacity onPress= {
                                async () =>
                                {
                                    await this.download();
                                }
                            }
                                              style = {styles.downloadButtonStyle}
                                              color="#871589">

                                <Text style = {styles.buttonText}>Download!</Text>

                            </TouchableOpacity>

                        </View>



                    }


                </View>
            </>

        )
    }

}

const styles = StyleSheet.create({

    inputContainer: {
        justifyContent: 'center',
        marginTop: 75,
        marginLeft: 30,
        marginRight: 30,
        marginBottom: 30

    },

    trackInfoContainer: {
        justifyContent: 'center',
        alignContent: 'center',
        alignItems: 'center'
    },

    buttonText: {
        textAlign: 'center',
        color: 'white'


    },

    buttonStyle: {
        marginTop: 10,
        borderColor: 'black',
        borderWidth: 2,
        height: 40,
        justifyContent: 'center',
        borderRadius:10


    },

    downloadButtonStyle:{
        marginTop: 10,
        borderColor: 'white',
        backgroundColor: 'cadetblue',
        borderWidth: 1,
        height: 50,
        width: 100,
        alignSelf: 'center',
        justifyContent: 'center',
        borderRadius:10
    },

    urlInput: {
        height: 40,
        borderColor: 'gray',
        borderWidth: 2,
        borderRadius:10,
        backgroundColor: 'white'
        // flex: 2,
        // marginTop: 150,
        // marginLeft: 100,
        // marginBottom: 30,
    },

    trackInfoText: {
        fontSize: 20,
        textAlign: 'center',
        fontFamily: "Futura",
        color: 'white'

    }




})
// TrackPlayer.add({
//     id: 'trackId',
//     // url: 'https://www.learningcontainer.com/wp-content/uploads/2020/02/Kalimba.mp3',
//     url: 'file:///Users/chrissims/Library/Developer/CoreSimulator/Devices/07A47CE7-672F-418D-8F21-8E8B02EB0215/data/Containers/Data/Application/2F2A1779-30F1-4AD1-936E-2A5E638B16F8/Documents/RNFetchBlob_tmp/RNFetchBlobTmp_rf7pshxcbwf2f3h4pp4x4.mp3',
//     title: 'Track Title',
//     artist: 'Track Artist',
//     artwork: ''
// }).then(this.props.navigation.navigate('Player'))
